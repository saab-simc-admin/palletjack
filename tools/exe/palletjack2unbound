#!/usr/bin/env ruby
#
# Write DNS resolver stub declarations from a Palletjack warehouse
#
# Data model assumptions:
#
#   service:
#     unbound:
#       server:
#         - interface: 0.0.0.0
#         - access-control: 192.0.2.0/24 allow
#         - ...
#
# Other configuration categories than +system+ are not supported.

require 'palletjack/tool'
require 'ip'
require 'resolv'

class PalletJack2Unbound < PalletJack::Tool
  # Representation of a stub zone configuration for Unbound

  class StubZone
    # :call-seq:
    # new(TOOL, ZONE, AUTH-NS, ...)
    # new(TOOL, ZONE, AUTH-NS, ..., transparent: true)
    #
    # If the +transparent+ option is true, it represents
    # a <tt>local-zone ... transparent</tt>, declaration to
    # override the builtin RFC1918 blocking in unbound.

    def initialize(zone, *stub_addrs, transparent: false)
      raise ArgumentError.new if stub_addrs.empty?

      @tool = PalletJack2Unbound.instance
      @zone = zone
      @stub_addrs = stub_addrs
      @transparent = transparent
    end

    # Write a stub-zone declaration to a file in conf.d/

    def output
      @tool.config_file :conf_dir, "#{@zone}.conf" do |stubfile|
        stubfile << @tool.git_header('palletjack2unbound')
        stubfile << "
stub-zone:
  name: #{@zone}\n"

        @stub_addrs.each do |addr|
          stubfile << "  stub-addr: #{addr}\n"
        end

        if @transparent
          stubfile << "\nserver:\n  local-zone: \"#{@zone}\" transparent\n"
        end
      end
    end
  end

  # Representation of a service wide configuration for Unbound

  class UnboundConfig
    def initialize(service_name)
      @tool = PalletJack2Unbound.instance
      @service_name = service_name
      @service_config = @tool.jack.fetch(kind: 'service',
                                         parent_name: 'dns-resolver',
                                         name: @service_name)
    end

    # Generate unbound service configuration

    def output
      @tool.config_file :local_dir, "#{@service_name}.conf" do |configfile|
        configfile << @tool.git_header('palletjack2unbound')
        @service_config['service.unbound.server'].each do |config|
          config.each do |key, value|
            configfile << "#{key}: #{value}\n"
          end
        end
      end
    end
  end

  # Setup command line options parser

  def parse_options(opts)
    opts.banner =
"Usage: #{$PROGRAM_NAME} -w <warehouse> -s <service> -o <output directory>

Write DNS resolver stub declarations from a Palletjack warehouse
into Salt state configuration for unbound.

E.g.
  palletjack2unbound -w /etc/salt/respository/warehouse \\
    -s example-com \\
    -o /etc/salt/repository/state/unbound/files"

    opts.on('-o DIR', '--output DIR', 'output directory', String) {|dir|
      options[:output] = dir
      options[:conf_dir] = "#{dir}/conf.d"
      options[:local_dir] = "#{dir}/local.d"
    }
    opts.on('-s SERVICE', '--service SERVICE',
            'service name for global configuration', String) {|service|
      options[:service] = service
    }

    required_option :output
    required_option :service
  end

  # Check if +ip+ belongs to some RFC1918 network

  def rfc1918?(ip)
    rfc1918_nets = [IP.new('10.0.0.0/8'),
                    IP.new('172.16.0.0/12'),
                    IP.new('192.168.0.0/16')]
    rfc1918_nets.any? {|net| ip.is_in?(net)}
  end

  # Processing stage for stub zones

  def process_stub_zones
    @stub_zones = []

    jack.each(kind: 'domain') do |domain|
      zone = domain['net.dns.domain']
      stub_addrs = []

      domain['net.dns.ns'].each do |ns|
        nsname = Resolv::DNS::Name.create(ns)
        nsname =
          Resolv::DNS::Name.create("#{ns}.#{zone}.") unless nsname.absolute?

        jack.each(kind: 'ipv4_interface',
                  all?: {'net.dns.fqdn' => nsname.to_s}) do |ipv4|
          stub_addrs << ipv4['net.ipv4.address']
        end
      end

      @stub_zones << StubZone.new(zone, *stub_addrs)

      next unless domain['net.ipv4.cidr']

      # Assume all delegations happen on octet boundaries for now.
      # TODO: RFC 2317 classless in-addr.arpa delegation

      ip_net = IP.new(domain['net.ipv4.cidr'])
      reverse_zone = ip_net.to_arpa
      prefix_octets, _ = domain['net.ipv4.prefixlen'].to_i.divmod(8)
      reverse_zone =
        ip_net.to_arpa.split('.')[-(2 + prefix_octets)..5].join('.')

      # Make the same assumption that palletjack2knot does;
      # reverse delegations are made to the same nameserver
      # as forward delegations.

      @stub_zones << StubZone.new(reverse_zone, *stub_addrs,
                                  transparent: rfc1918?(ip_net))
    end
  end

  # Processing stage for global service configuration

  def process_service_config
    @unbound_config = UnboundConfig.new(options[:service])
  end

  # Main processing stage

  def process
    process_stub_zones
    process_service_config
  end

  # Config file output stage

  def output
    config_dir :conf_dir
    config_dir :local_dir

    @stub_zones.each {|stub_zone| stub_zone.output }
    @unbound_config.output
  end
end

if PalletJack2Unbound.standalone?(__FILE__)
  PalletJack2Unbound.run
end
