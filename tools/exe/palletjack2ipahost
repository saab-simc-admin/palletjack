#!/usr/bin/env ruby

# Create host objects in a FreeIPA or Red Hat IdM instance.
#
# This script will loop over all hosts in the PalletJack database and check
# if they are registered on the IPA server. The missing hosts will be added.
# A random password will be generated by IPA and stored in the pallet.
#
# If the IPA server is configured as authorative DNS server, records will
# be created for the new host.
#
# Data model assumptions:
# - Each domain corresponds uniquely to one IPv4 network

require 'palletjack/tool'
require 'palletjack/ipa'
require 'yaml'

class PalletJack2Ipahost < PalletJack::Tool

  def process
    @ipa_pallets = {}
    # Grab a list of all hosts in IPA
    host_find = PalletJack::Ipa::Command.new("host_find")

    if host_find.error? then
      puts "ERROR: " + host_find.error_name + " " + host_find.error_message
      exit 1
    end

    # Then convert the result to an array of FQDN strings
    ipa_hosts = []
    host_find.results.each do |host|
      ipa_hosts << host['fqdn'][0]
    end

    jack.each(kind: 'system') do |system|
      next if ipa_hosts.include? system['net.dns.fqdn'] # Skip existing hosts
      next unless system['system.role'].include? 'ipa-client' # Only ipa clients

      # Generate a random password
      add_host_params = { :random => true }

      ip_address = nil
      system.children(kind:'ipv4_interface') do |interface|
        # Find a interface in the same domain as the host.
        if interface['net.dns.domain'] == system['net.dns.domain'] then
          ip_address = interface['net.ipv4.address']
        end
      end

      if ip_address then
        add_host_params[:ip_address] = ip_address
      else
        puts " ! WARNING: No IP Address found for " + system['net.dns.fqdn'] + ", setting force = true."
        add_host_params[:force] = true
      end

      # Add the host
      add_host = PalletJack::Ipa::Command.new("host_add", system['net.dns.fqdn'], **add_host_params)

      unless add_host.error? then

        # Read
        pallet = system['system.ipa']
        # Modify
        if pallet == nil then
          pallet = { otp: add_host.results[0]['randompassword'][0] }
        else
          pallet['otp'] = add_host.results[0]['randompassword'][0]
        end
        # Write, or at least save for writing.
        @ipa_pallets[system['net.dns.name']] = pallet
        # Add the host to any specified hostgroups
        if system['system.ipa.hostgroups'] then
          system['system.ipa.hostgroups'].each do |group|
            hostgroup_add = PalletJack::Ipa::Command.new('hostgroup_add_member',
                                                         group,
                                                         host: [system['net.dns.fqdn']] )
          end
          # Add service.ipa.otp to warehouse
          puts " * Added host " + system['net.dns.name']
        end
      else
        puts " ! ERROR: Adding host " + system['net.dns.name']
        puts " ! " + add_host.error_name + " " + add_host.error_message
      end
    end
  end

  def output
    @ipa_pallets.each do |name, pallet|
      pallet_box 'system', name, 'ipa' do
        { system: { ipa: pallet } }
      end
    end
  end
end

if PalletJack2Ipahost.standalone?(__FILE__) then
  PalletJack2Ipahost.run
end
