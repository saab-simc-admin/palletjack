#!/usr/bin/env ruby

# Write YAML files containing Salt external pillar data for all
# systems, one file per system.
#
# Intended to be run from a Git post-update hook or similar, writing
# YAML files which will be read by a Salt cmd_yaml external pillar,
# since running the entire Pallet Jack infrastructure once per minion
# for every pillar refresh is a bit excessive. Example Salt master
# configuration:
#
#   ext_pillar:
#     - cmd_yaml: cat /var/cache/salt/ext_pillar/%s.yaml
#
# Data model assumptions:
# - Salt minion ID is FQDN
# - Role list is at system.role
# - Output structure is:
#
#   palletjack:
#     role:
#       - role1
#       - role2
#       ...

require 'palletjack'
require 'optparse'
require 'yaml'

options = {}

opts = OptionParser.new
opts.banner = "Usage: #{$PROGRAM_NAME} -w <warehouse> -d <output directory>

Write Salt pillar data from a Palletjack warehouse, one YAML file per system

"
opts.on("-w DIR", "--warehouse DIR", "warehouse directory", String) {|dir| options[:warehouse] = dir }
opts.on("-o DIR", "--output DIR", "output directory", String) {|dir| options[:output] = dir }
opts.parse!

if not options[:warehouse] or
    not options[:output] or
    not File.directory?(options[:output])
  puts opts.to_s
  exit 1
end

jack = PalletJack.new(options[:warehouse])

jack["system"].each do |system|
  File.open("#{options[:output]}/#{system['net.dns.fqdn']}.yaml", File::CREAT | File::TRUNC | File::WRONLY, 0644) do |yamlfile|
    yamlfile << { 'palletjack' => { 'role' => system['system.role'] } }.to_yaml
  end
end
